[{"C:\\Users\\sam\\New folder\\camunda-react\\src\\index.js":"1","C:\\Users\\sam\\New folder\\camunda-react\\src\\containers\\Root.js":"2","C:\\Users\\sam\\New folder\\camunda-react\\src\\store\\configureStore.js":"3","C:\\Users\\sam\\New folder\\camunda-react\\src\\containers\\StartProcessListPage.js":"4","C:\\Users\\sam\\New folder\\camunda-react\\src\\containers\\App.js":"5","C:\\Users\\sam\\New folder\\camunda-react\\src\\containers\\StartProcessPage.js":"6","C:\\Users\\sam\\New folder\\camunda-react\\src\\containers\\TasklistPage.js":"7","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\Footer.js":"8","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\Header.js":"9","C:\\Users\\sam\\New folder\\camunda-react\\src\\middleware\\api.js":"10","C:\\Users\\sam\\New folder\\camunda-react\\src\\reducers\\index.js":"11","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\DeployProcess.js":"12","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\List.js":"13","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\BPMNDiagram.js":"14","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\GenericForm.js":"15","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\Taskform.js":"16","C:\\Users\\sam\\New folder\\camunda-react\\src\\actions\\index.js":"17","C:\\Users\\sam\\New folder\\camunda-react\\src\\constants\\ActionTypes.js":"18","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\index.js":"19","C:\\Users\\sam\\New folder\\camunda-react\\src\\actions\\camunda-rest\\task.js":"20","C:\\Users\\sam\\New folder\\camunda-react\\src\\actions\\camunda-rest\\deployment.js":"21","C:\\Users\\sam\\New folder\\camunda-react\\src\\actions\\camunda-rest\\process-definition.js":"22","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\myprocess\\index.js":"23","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\myprocess\\startNewProcess.js":"24","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\invoice\\index.js":"25","C:\\Users\\sam\\New folder\\camunda-react\\src\\constants\\ValidationOptions.js":"26","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\invoice\\startProcess.js":"27","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\invoice\\newTask.js":"28","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\myprocess\\approveDataTask.js":"29","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\LandAllotment\\index.js":"30","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\LandAllotment\\Approve.js":"31","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\LandAllotment\\Firmdetails.js":"32","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\LandAllotment_camunda\\index.js":"33","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\LandAllotment_camunda\\startNewProcess.js":"34","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\LandAllotment_camunda\\userTask.js":"35"},{"size":420,"mtime":1678895667191,"results":"36","hashOfConfig":"37"},{"size":982,"mtime":1678895667186,"results":"38","hashOfConfig":"37"},{"size":322,"mtime":1678895667197,"results":"39","hashOfConfig":"37"},{"size":1746,"mtime":1678895667187,"results":"40","hashOfConfig":"37"},{"size":1222,"mtime":1679136989366,"results":"41","hashOfConfig":"37"},{"size":1173,"mtime":1678895667187,"results":"42","hashOfConfig":"37"},{"size":1789,"mtime":1678895667187,"results":"43","hashOfConfig":"37"},{"size":437,"mtime":1678955872530,"results":"44","hashOfConfig":"37"},{"size":1438,"mtime":1678955803768,"results":"45","hashOfConfig":"37"},{"size":4412,"mtime":1678895667191,"results":"46","hashOfConfig":"37"},{"size":1096,"mtime":1678895667191,"results":"47","hashOfConfig":"37"},{"size":1256,"mtime":1678895667165,"results":"48","hashOfConfig":"37"},{"size":1420,"mtime":1678895667165,"results":"49","hashOfConfig":"37"},{"size":1186,"mtime":1678895667165,"results":"50","hashOfConfig":"37"},{"size":1726,"mtime":1678895667165,"results":"51","hashOfConfig":"37"},{"size":1423,"mtime":1678895667165,"results":"52","hashOfConfig":"37"},{"size":1980,"mtime":1679150556668,"results":"53","hashOfConfig":"37"},{"size":1840,"mtime":1678895667182,"results":"54","hashOfConfig":"37"},{"size":400,"mtime":1679225041600,"results":"55","hashOfConfig":"37"},{"size":1420,"mtime":1679158984963,"results":"56","hashOfConfig":"37"},{"size":669,"mtime":1678895667165,"results":"57","hashOfConfig":"37"},{"size":1926,"mtime":1678895667165,"results":"58","hashOfConfig":"37"},{"size":128,"mtime":1678895667165,"results":"59","hashOfConfig":"37"},{"size":1694,"mtime":1679149959376,"results":"60","hashOfConfig":"37"},{"size":108,"mtime":1678895667165,"results":"61","hashOfConfig":"37"},{"size":536,"mtime":1678895667182,"results":"62","hashOfConfig":"37"},{"size":2619,"mtime":1679208278544,"results":"63","hashOfConfig":"37"},{"size":2620,"mtime":1678942857114,"results":"64","hashOfConfig":"37"},{"size":1476,"mtime":1678971927206,"results":"65","hashOfConfig":"37"},{"size":104,"mtime":1679048218495,"results":"66","hashOfConfig":"37"},{"size":1170,"mtime":1679048206660,"results":"67","hashOfConfig":"37"},{"size":926,"mtime":1679000234711,"results":"68","hashOfConfig":"37"},{"size":114,"mtime":1679229398667,"results":"69","hashOfConfig":"37"},{"size":10605,"mtime":1679236591834,"results":"70","hashOfConfig":"37"},{"size":1325,"mtime":1679225671796,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1xe3v54",{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\sam\\New folder\\camunda-react\\src\\index.js",[],["145","146"],"C:\\Users\\sam\\New folder\\camunda-react\\src\\containers\\Root.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\store\\configureStore.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\containers\\StartProcessListPage.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\containers\\App.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\containers\\StartProcessPage.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\containers\\TasklistPage.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\Footer.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\Header.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\middleware\\api.js",["147"],"import { normalize, schema } from 'normalizr'\r\nimport { camelizeKeys } from 'humps'\r\n\r\nconst API_ROOT = '/engine-rest/'\r\n\r\n// Fetches an API response and normalizes the result JSON according to schema.\r\n// This makes every API response have the same shape, regardless of how nested it was.\r\nconst callApi = (endpoint, schema, settings = {}) => {\r\n  const fullUrl = (endpoint.indexOf(API_ROOT) === -1) ? API_ROOT + endpoint : endpoint\r\n\r\n  return fetch(fullUrl, settings)\r\n    .then(response =>\r\n      response.json().then(json => {\r\n        if (!response.ok) {\r\n          return Promise.reject(json)\r\n        }\r\n\r\n        const camelizedJson = camelizeKeys(json)\r\n          return Object.assign({},\r\n          normalize(camelizedJson, schema),\r\n          {  }\r\n        )\r\n      })\r\n    )\r\n}\r\n\r\n// We use this Normalizr schemas to transform API responses from a nested form\r\n// to a flat form where repos and users are placed in `entities`, and nested\r\n// JSON objects are replaced with their IDs. This is very convenient for\r\n// consumption by reducers, because we can easily build a normalized tree\r\n// and keep it updated as we fetch more data.\r\n\r\n// Read more about Normalizr: https://github.com/paularmstrong/normalizr\r\n\r\nconst processDefinitionSchema = new schema.Entity('processDefinition', {}, {\r\n  id: processDefinition => processDefinition.id,\r\n  name: processDefinition => processDefinition.name\r\n})\r\n\r\nconst processDefinitionXMLSchema = new schema.Entity('processDefinitionXML', {}, {\r\n\r\n});\r\n\r\nconst formKeySchema = new schema.Entity('formKey', {}, {\r\n  idAttribute: 'test',\r\n});\r\n\r\nconst processInstanceStartedSchema = new schema.Entity('processInstanceStarted', {}, {\r\n\r\n});\r\n\r\nconst taskSchema = new schema.Entity('task', {}, {\r\n  id: task => task.id,\r\n});\r\n\r\nconst taskVariableSchema = new schema.Entity('taskVariable', {}, {\r\n  processStrategy: (value, parent, key) => {\r\n    return {\r\n      values: value,\r\n      test: key,\r\n      parent: parent\r\n    }\r\n  }\r\n})\r\nconst taskVariableArraySchema = new schema.Entity('taskVariables', {}, {\r\n  idAttribute: variable => 'variables',\r\n  processStrategy: (value, parent, key) => {\r\n    let values = {};\r\n    Object.keys(value).forEach((item) => {\r\n      values[item] = value[item].value\r\n    })\r\n    return values\r\n  }\r\n})\r\n\r\nconst processDeploymentSchema = new schema.Entity('processDeployment', {}, {})\r\n\r\n// Schemas for Github API responses.\r\nexport const Schemas = {\r\n  PROCESS_DEFINITION: processDefinitionSchema,\r\n  PROCESS_DEFINITION_ARRAY: [processDefinitionSchema],\r\n  PROCESS_DEFINITION_XML: processDefinitionXMLSchema,\r\n  FORM_KEY: formKeySchema,\r\n  TASK: taskSchema,\r\n  TASK_ARRAY: [taskSchema],\r\n  PROCESS_INSTANCE_STARTED: processInstanceStartedSchema,\r\n  TASK_VARIABLE: taskVariableSchema,\r\n  TASK_VARIABLES: taskVariableArraySchema,\r\n  PROCESS_DEPLOYMENT: processDeploymentSchema\r\n}\r\n\r\n// Action key that carries API call info interpreted by this Redux middleware.\r\nexport const CALL_API = 'Call API'\r\n\r\n// A Redux middleware that interprets actions with CALL_API info specified.\r\n// Performs the call and promises when such actions are dispatched.\r\nexport default store => next => action => {\r\n  const callAPI = action[CALL_API]\r\n\r\n  if (typeof callAPI === 'undefined') {\r\n    return next(action)\r\n  }\r\n\r\n  let { endpoint } = callAPI\r\n  const { schema, types, settings } = callAPI\r\n\r\n  if (typeof endpoint === 'function') {\r\n    endpoint = endpoint(store.getState())\r\n  }\r\n\r\n  if (typeof endpoint !== 'string') {\r\n    throw new Error('Specify a string endpoint URL.')\r\n  }\r\n  if (!schema) {\r\n    throw new Error('Specify one of the exported Schemas.')\r\n  }\r\n  if (!Array.isArray(types) || types.length !== 3) {\r\n    throw new Error('Expected an array of three action types.')\r\n  }\r\n  if (!types.every(type => typeof type === 'string')) {\r\n    throw new Error('Expected action types to be strings.')\r\n  }\r\n\r\n  const actionWith = data => {\r\n    const finalAction = Object.assign({}, action, data)\r\n    delete finalAction[CALL_API]\r\n    return finalAction\r\n  }\r\n\r\n  const [ requestType, successType, failureType ] = types\r\n  next(actionWith({ type: requestType }))\r\n\r\n  return callApi(endpoint, schema, settings).then(\r\n    response => next(actionWith({\r\n      response,\r\n      type: successType\r\n    })),\r\n    error => next(actionWith({\r\n      type: failureType,\r\n      error: error.message || 'Something bad happened'\r\n    }))\r\n  )\r\n}\r\n","C:\\Users\\sam\\New folder\\camunda-react\\src\\reducers\\index.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\DeployProcess.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\List.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\BPMNDiagram.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\GenericForm.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\Taskform.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\actions\\index.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\constants\\ActionTypes.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\index.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\actions\\camunda-rest\\task.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\actions\\camunda-rest\\deployment.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\actions\\camunda-rest\\process-definition.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\myprocess\\index.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\myprocess\\startNewProcess.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\invoice\\index.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\constants\\ValidationOptions.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\invoice\\startProcess.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\invoice\\newTask.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\myprocess\\approveDataTask.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\LandAllotment\\index.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\LandAllotment\\Approve.js",["148","149"],"import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { Form, Button,Dropdown} from 'semantic-ui-react'\r\nimport { InputField, CheckboxField, DropdownField } from 'react-semantic-redux-form'\r\nimport * as Validation from '../../../constants/ValidationOptions'\r\n\r\n\r\n\r\nlet SimpleForm = props => {\r\n  const { handleSubmit } = props\r\n\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <legend>Approve Form</legend>\r\n      <Field name='lastName' component={InputField} label='Last Name' placeholder='Last Name'\r\n        validate={[ Validation.required, Validation.maxLength15, Validation.minLength2 ]}/>\r\n      <Form.Group>\r\n        <Field name='approved' component={CheckboxField} label='Approve'/>\r\n      </Form.Group>\r\n\r\n      <Form.Field control={Button} primary type='submit'>Complete</Form.Field>\r\n    </Form>\r\n  )\r\n}   \r\n\r\nSimpleForm = reduxForm({\r\n  form: 'simpleForm',\r\n  enableReinitialize: true\r\n})(SimpleForm)\r\nSimpleForm = connect(\r\n  state => ({\r\n    initialValues: state.entities.taskVariables ? state.entities.taskVariables.variables : {}\r\n  })\r\n)(SimpleForm)\r\nexport default SimpleForm\r\n","C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\LandAllotment\\Firmdetails.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\LandAllotment_camunda\\index.js",[],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\LandAllotment_camunda\\startNewProcess.js",["150"],"C:\\Users\\sam\\New folder\\camunda-react\\src\\components\\forms\\LandAllotment_camunda\\userTask.js",[],{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":97,"column":1,"nodeType":"157","endLine":143,"endColumn":2},{"ruleId":"158","severity":1,"message":"159","line":4,"column":23,"nodeType":"160","messageId":"161","endLine":4,"endColumn":31},{"ruleId":"158","severity":1,"message":"162","line":5,"column":37,"nodeType":"160","messageId":"161","endLine":5,"endColumn":50},{"ruleId":"158","severity":1,"message":"163","line":5,"column":7,"nodeType":"160","messageId":"161","endLine":5,"endColumn":20},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'Dropdown' is defined but never used.","Identifier","unusedVar","'DropdownField' is defined but never used.","'formtodisplay' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]