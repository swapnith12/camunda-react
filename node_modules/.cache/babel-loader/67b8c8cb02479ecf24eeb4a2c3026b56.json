{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sam\\\\New folder\\\\camunda-react\\\\src\\\\containers\\\\StartProcessPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport GenericForm from '../components/GenericForm';\nimport { loadProcessDefinitions, loadFormKey } from '../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass StartProcessPage extends Component {\n  componentWillMount() {\n    this.props.loadFormKey(this.props.process);\n  }\n  render() {\n    const {\n      process,\n      formKey,\n      processInstanceStarted,\n      values\n    } = this.props;\n    const {\n      businessKey\n    } = values;\n    if (!formKey && !processInstanceStarted) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading Process Start Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this);\n    } else if (processInstanceStarted) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Your Application Submitted.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 41\n        }, this), \"Application Id:\", businessKey]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this);\n    } else {\n      const key = formKey['undefined'].key;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(GenericForm, {\n          formKey: key,\n          processDefinitionKey: process\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this);\n    }\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  const params = ownProps.match.params;\n  return {\n    ...params,\n    ...state.entities\n  };\n};\nexport default withRouter(connect(mapStateToProps, {\n  loadProcessDefinitions,\n  loadFormKey\n})(StartProcessPage));","map":{"version":3,"names":["React","Component","connect","withRouter","GenericForm","loadProcessDefinitions","loadFormKey","jsxDEV","_jsxDEV","StartProcessPage","componentWillMount","props","process","render","formKey","processInstanceStarted","values","businessKey","children","fileName","_jsxFileName","lineNumber","columnNumber","key","processDefinitionKey","mapStateToProps","state","ownProps","params","match","entities"],"sources":["C:/Users/sam/New folder/camunda-react/src/containers/StartProcessPage.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport GenericForm from '../components/GenericForm'\r\nimport { loadProcessDefinitions, loadFormKey } from '../actions'\r\n\r\n\r\nclass StartProcessPage extends Component {\r\n  componentWillMount() {\r\n    this.props.loadFormKey(this.props.process);\r\n  }\r\n\r\n  render() {\r\n    const { process, formKey, processInstanceStarted,values} = this.props\r\n    const {businessKey}=values\r\n\r\n\r\n    if (!formKey && !processInstanceStarted) {\r\n      return (\r\n        <div>Loading Process Start Form</div>\r\n      )\r\n    } else if (processInstanceStarted) {\r\n      return (\r\n        <div>Your Application Submitted.<br/>Application Id:{businessKey}</div>\r\n      )\r\n    } else {\r\n      const key = formKey['undefined'].key\r\n      return (\r\n        <div>\r\n          <GenericForm formKey={key} processDefinitionKey={process} />\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const params = ownProps.match.params\r\n  return {\r\n    ...params,\r\n    ...state.entities\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, {\r\n  loadProcessDefinitions,\r\n  loadFormKey\r\n})(StartProcessPage))\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,WAAW,MAAM,2BAA2B;AACnD,SAASC,sBAAsB,EAAEC,WAAW,QAAQ,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGhE,MAAMC,gBAAgB,SAASR,SAAS,CAAC;EACvCS,kBAAkBA,CAAA,EAAG;IACnB,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC,IAAI,CAACK,KAAK,CAACC,OAAO,CAAC;EAC5C;EAEAC,MAAMA,CAAA,EAAG;IACP,MAAM;MAAED,OAAO;MAAEE,OAAO;MAAEC,sBAAsB;MAACC;IAAM,CAAC,GAAG,IAAI,CAACL,KAAK;IACrE,MAAM;MAACM;IAAW,CAAC,GAACD,MAAM;IAG1B,IAAI,CAACF,OAAO,IAAI,CAACC,sBAAsB,EAAE;MACvC,oBACEP,OAAA;QAAAU,QAAA,EAAK;MAA0B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM;IAEzC,CAAC,MAAM,IAAIP,sBAAsB,EAAE;MACjC,oBACEP,OAAA;QAAAU,QAAA,GAAK,6BAA2B,eAAAV,OAAA;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAK,mBAAe,EAACL,WAAW;MAAA;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAO;IAE3E,CAAC,MAAM;MACL,MAAMC,GAAG,GAAGT,OAAO,CAAC,WAAW,CAAC,CAACS,GAAG;MACpC,oBACEf,OAAA;QAAAU,QAAA,eACEV,OAAA,CAACJ,WAAW;UAACU,OAAO,EAAES,GAAI;UAACC,oBAAoB,EAAEZ;QAAQ;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACxD;IAEV;EACF;AAEF;AACA,MAAMG,eAAe,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC3C,MAAMC,MAAM,GAAGD,QAAQ,CAACE,KAAK,CAACD,MAAM;EACpC,OAAO;IACL,GAAGA,MAAM;IACT,GAAGF,KAAK,CAACI;EACX,CAAC;AACH,CAAC;AAED,eAAe3B,UAAU,CAACD,OAAO,CAACuB,eAAe,EAAE;EACjDpB,sBAAsB;EACtBC;AACF,CAAC,CAAC,CAACG,gBAAgB,CAAC,CAAC"},"metadata":{},"sourceType":"module"}