{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sam\\\\New folder\\\\camunda-react\\\\src\\\\containers\\\\App.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Container, Header } from 'semantic-ui-react';\nimport DeployProcess from '../components/DeployProcess';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = _ref => {\n  let {\n    actions,\n    children\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      text: true,\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        as: \"h2\",\n        className: \"text-primary\",\n        children: \"Truviq-Demo Application\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This project shows how one can use React Redux with the standard Camunda REST API. It is an example implementation of how one could build a Tasklist for Camunda using Front End technology only.The Task Forms are defined within this application and not on the Server-Side to make it very easy to use.This project was bootstrapped with Create React App. Please see the React Scripts Guide to see what you can do with this project from the React perspective.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"After uploading the process you should probably go to \\\"Start Process\\\" and choose the \\\"My Process\\\" Process.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/startprocess/list\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          children: \"Start Process\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 37\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 3\n  }, this);\n};\n_c = App;\nconst mapStateToProps = state => ({});\nexport default connect(mapStateToProps)(App);\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","connect","Link","Container","Header","DeployProcess","jsxDEV","_jsxDEV","App","_ref","actions","children","text","as","className","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","mapStateToProps","state","$RefreshReg$"],"sources":["C:/Users/sam/New folder/camunda-react/src/containers/App.js"],"sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { Container, Header } from 'semantic-ui-react'\r\nimport DeployProcess from '../components/DeployProcess'\r\n\r\n\r\nconst App = ({actions, children}) => (\r\n  <div>\r\n    <Container text>\r\n      <Header as='h2' className='text-primary'>Truviq-Demo Application</Header>\r\n      <p>This project shows how one can use React Redux with the standard Camunda REST API. It is an example implementation of how one could build a Tasklist for Camunda using Front End technology only.The Task Forms are defined within this application and not on the Server-Side to make it very easy to use.This project was bootstrapped with Create React App. Please see the React Scripts Guide to see what you can do with this project from the React perspective.</p>\r\n      <p>After uploading the process you should probably go to \"Start Process\" and choose the \"My Process\" Process.</p>\r\n      <Link to=\"/startprocess/list\"><button className='btn btn-primary'>Start Process</button></Link>\r\n\r\n    </Container>\r\n  </div>\r\n)\r\n\r\nconst mapStateToProps = state => ({\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n)(App)\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,SAAS,EAAEC,MAAM,QAAQ,mBAAmB;AACrD,OAAOC,aAAa,MAAM,6BAA6B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGvD,MAAMC,GAAG,GAAGC,IAAA;EAAA,IAAC;IAACC,OAAO;IAAEC;EAAQ,CAAC,GAAAF,IAAA;EAAA,oBAC9BF,OAAA;IAAAI,QAAA,eACEJ,OAAA,CAACJ,SAAS;MAACS,IAAI;MAAAD,QAAA,gBACbJ,OAAA,CAACH,MAAM;QAACS,EAAE,EAAC,IAAI;QAACC,SAAS,EAAC,cAAc;QAAAH,QAAA,EAAC;MAAuB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eACzEX,OAAA;QAAAI,QAAA,EAAG;MAAuc;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eAC9cX,OAAA;QAAAI,QAAA,EAAG;MAA0G;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eACjHX,OAAA,CAACL,IAAI;QAACiB,EAAE,EAAC,oBAAoB;QAAAR,QAAA,eAACJ,OAAA;UAAQO,SAAS,EAAC,iBAAiB;UAAAH,QAAA,EAAC;QAAa;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAS;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAO;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAErF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACR;AAAA,CACP;AAAAE,EAAA,GAVKZ,GAAG;AAYT,MAAMa,eAAe,GAAGC,KAAK,KAAK,CAClC,CAAC,CAAC;AAEF,eAAerB,OAAO,CACpBoB,eAAe,CAChB,CAACb,GAAG,CAAC;AAAA,IAAAY,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module"}